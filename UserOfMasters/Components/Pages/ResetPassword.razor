@page "/resetPassword"
@page "/resetPassword/{UserName}"

@inject AuthService AuthService
@inject UserService UserService
@inject NavigationManager NavManager


<h3>ResetPassword</h3>
<Messages Message="@Message"></Messages>

<div>
	<InputField Label="Username"
				@bind-Value="UserName"
				Placeholder="Enter username here">
	</InputField>
	<InputField Label="ResetToken"
				@bind-Value="@ResetToken"
				Placeholder="Enter reset token here">
	</InputField>
	<InputField Label="Password"
				@bind-Value="Password"
				Placeholder="Enter password here"
				IsPassword="true"
				ShowPassword="@ShowPassword">
	</InputField>
	<InputField Label="Confirm password"
				@bind-Value="ConfirmPassword"
				Placeholder="Confirm the password here"
				IsPassword="true"
				ShowPassword="@ShowPassword">
	</InputField>


	<div>
		<InputCheckbox @bind-Value="ShowPassword"></InputCheckbox>
		<label>Show password</label>
	</div>

	<div>
		<button @onclick="ResetPasswordOfUser">Reset password</button>
		<button @onclick="NavToLogin">Back to login</button>
	</div>
</div>

@code {
	[Parameter]
	public string UserName { get; set; } = string.Empty;

	public string ResetToken = string.Empty;
	public string Password = string.Empty;
	public string ConfirmPassword = string.Empty;
	public string Message = string.Empty;

	public bool ShowPassword = false;

	public async Task ResetPasswordOfUser()
	{
		if (Password != ConfirmPassword)
		{
			Message = "Passwords don't match";
			return;
		}
		var user = UserService.GetUserWithUserName(UserName);


		if (user == null)
		{
			Message = $"User: ({UserName}) not found in system.";
			return;
		}

		if (user.ResetToken == null || user.TokenExpire == null)
		{
			Message = "There is no Token generated.";
			NavManager.NavigateTo($"/forgotPassword/{Message}/{UserName}");
			return;
		}

		if (ResetToken != user.ResetToken)
		{
			Message = "Token invalid";
			return;
		}

		if (user.TokenExpire < DateTime.UtcNow)
		{
			Message = "Token expire";
			return;
		}



		var salt = AuthService.GetSaltOfGuid(user.UserId);

		user.PasswordHash = AuthService.HashPassword(Password, salt);
		Message = "Password updated successfully";

		user.ResetToken = null;
		user.TokenExpire = null;

		NavManager.NavigateTo($"/login/{Message}/{UserName}");
	}

	public void NavToLogin()
	{
		NavManager.NavigateTo("/login");
	}

}